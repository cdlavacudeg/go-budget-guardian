// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                           db,
		Account:                      newAccount(db, opts...),
		CategoriesExpense:            newCategoriesExpense(db, opts...),
		CategoriesIncome:             newCategoriesIncome(db, opts...),
		CategoriesSaving:             newCategoriesSaving(db, opts...),
		Group:                        newGroup(db, opts...),
		LedgerExpense:                newLedgerExpense(db, opts...),
		LedgerIncome:                 newLedgerIncome(db, opts...),
		LedgerSaving:                 newLedgerSaving(db, opts...),
		LedgerTransfer:               newLedgerTransfer(db, opts...),
		TotalInAccount:               newTotalInAccount(db, opts...),
		TotalPerCategoryExpense:      newTotalPerCategoryExpense(db, opts...),
		TotalPerCategoryGroupExpense: newTotalPerCategoryGroupExpense(db, opts...),
		TotalPerCategoryIncome:       newTotalPerCategoryIncome(db, opts...),
		TotalPerMonthAccount:         newTotalPerMonthAccount(db, opts...),
		TotalPerMonthGroup:           newTotalPerMonthGroup(db, opts...),
		User:                         newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Account                      account
	CategoriesExpense            categoriesExpense
	CategoriesIncome             categoriesIncome
	CategoriesSaving             categoriesSaving
	Group                        group
	LedgerExpense                ledgerExpense
	LedgerIncome                 ledgerIncome
	LedgerSaving                 ledgerSaving
	LedgerTransfer               ledgerTransfer
	TotalInAccount               totalInAccount
	TotalPerCategoryExpense      totalPerCategoryExpense
	TotalPerCategoryGroupExpense totalPerCategoryGroupExpense
	TotalPerCategoryIncome       totalPerCategoryIncome
	TotalPerMonthAccount         totalPerMonthAccount
	TotalPerMonthGroup           totalPerMonthGroup
	User                         user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                           db,
		Account:                      q.Account.clone(db),
		CategoriesExpense:            q.CategoriesExpense.clone(db),
		CategoriesIncome:             q.CategoriesIncome.clone(db),
		CategoriesSaving:             q.CategoriesSaving.clone(db),
		Group:                        q.Group.clone(db),
		LedgerExpense:                q.LedgerExpense.clone(db),
		LedgerIncome:                 q.LedgerIncome.clone(db),
		LedgerSaving:                 q.LedgerSaving.clone(db),
		LedgerTransfer:               q.LedgerTransfer.clone(db),
		TotalInAccount:               q.TotalInAccount.clone(db),
		TotalPerCategoryExpense:      q.TotalPerCategoryExpense.clone(db),
		TotalPerCategoryGroupExpense: q.TotalPerCategoryGroupExpense.clone(db),
		TotalPerCategoryIncome:       q.TotalPerCategoryIncome.clone(db),
		TotalPerMonthAccount:         q.TotalPerMonthAccount.clone(db),
		TotalPerMonthGroup:           q.TotalPerMonthGroup.clone(db),
		User:                         q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                           db,
		Account:                      q.Account.replaceDB(db),
		CategoriesExpense:            q.CategoriesExpense.replaceDB(db),
		CategoriesIncome:             q.CategoriesIncome.replaceDB(db),
		CategoriesSaving:             q.CategoriesSaving.replaceDB(db),
		Group:                        q.Group.replaceDB(db),
		LedgerExpense:                q.LedgerExpense.replaceDB(db),
		LedgerIncome:                 q.LedgerIncome.replaceDB(db),
		LedgerSaving:                 q.LedgerSaving.replaceDB(db),
		LedgerTransfer:               q.LedgerTransfer.replaceDB(db),
		TotalInAccount:               q.TotalInAccount.replaceDB(db),
		TotalPerCategoryExpense:      q.TotalPerCategoryExpense.replaceDB(db),
		TotalPerCategoryGroupExpense: q.TotalPerCategoryGroupExpense.replaceDB(db),
		TotalPerCategoryIncome:       q.TotalPerCategoryIncome.replaceDB(db),
		TotalPerMonthAccount:         q.TotalPerMonthAccount.replaceDB(db),
		TotalPerMonthGroup:           q.TotalPerMonthGroup.replaceDB(db),
		User:                         q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Account                      *accountDo
	CategoriesExpense            *categoriesExpenseDo
	CategoriesIncome             *categoriesIncomeDo
	CategoriesSaving             *categoriesSavingDo
	Group                        *groupDo
	LedgerExpense                *ledgerExpenseDo
	LedgerIncome                 *ledgerIncomeDo
	LedgerSaving                 *ledgerSavingDo
	LedgerTransfer               *ledgerTransferDo
	TotalInAccount               *totalInAccountDo
	TotalPerCategoryExpense      *totalPerCategoryExpenseDo
	TotalPerCategoryGroupExpense *totalPerCategoryGroupExpenseDo
	TotalPerCategoryIncome       *totalPerCategoryIncomeDo
	TotalPerMonthAccount         *totalPerMonthAccountDo
	TotalPerMonthGroup           *totalPerMonthGroupDo
	User                         *userDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Account:                      q.Account.WithContext(ctx),
		CategoriesExpense:            q.CategoriesExpense.WithContext(ctx),
		CategoriesIncome:             q.CategoriesIncome.WithContext(ctx),
		CategoriesSaving:             q.CategoriesSaving.WithContext(ctx),
		Group:                        q.Group.WithContext(ctx),
		LedgerExpense:                q.LedgerExpense.WithContext(ctx),
		LedgerIncome:                 q.LedgerIncome.WithContext(ctx),
		LedgerSaving:                 q.LedgerSaving.WithContext(ctx),
		LedgerTransfer:               q.LedgerTransfer.WithContext(ctx),
		TotalInAccount:               q.TotalInAccount.WithContext(ctx),
		TotalPerCategoryExpense:      q.TotalPerCategoryExpense.WithContext(ctx),
		TotalPerCategoryGroupExpense: q.TotalPerCategoryGroupExpense.WithContext(ctx),
		TotalPerCategoryIncome:       q.TotalPerCategoryIncome.WithContext(ctx),
		TotalPerMonthAccount:         q.TotalPerMonthAccount.WithContext(ctx),
		TotalPerMonthGroup:           q.TotalPerMonthGroup.WithContext(ctx),
		User:                         q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
