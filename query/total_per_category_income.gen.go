// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/cdlavacudeg/go-budget-guardian/model"
)

func newTotalPerCategoryIncome(db *gorm.DB, opts ...gen.DOOption) totalPerCategoryIncome {
	_totalPerCategoryIncome := totalPerCategoryIncome{}

	_totalPerCategoryIncome.totalPerCategoryIncomeDo.UseDB(db, opts...)
	_totalPerCategoryIncome.totalPerCategoryIncomeDo.UseModel(&model.TotalPerCategoryIncome{})

	tableName := _totalPerCategoryIncome.totalPerCategoryIncomeDo.TableName()
	_totalPerCategoryIncome.ALL = field.NewAsterisk(tableName)
	_totalPerCategoryIncome.Year = field.NewInt32(tableName, "Year")
	_totalPerCategoryIncome.Usuario = field.NewInt32(tableName, "Usuario")
	_totalPerCategoryIncome.IDCat = field.NewInt32(tableName, "idCat")
	_totalPerCategoryIncome.Categoria = field.NewString(tableName, "Categoria")
	_totalPerCategoryIncome.Total = field.NewFloat64(tableName, "Total")

	_totalPerCategoryIncome.fillFieldMap()

	return _totalPerCategoryIncome
}

type totalPerCategoryIncome struct {
	totalPerCategoryIncomeDo

	ALL       field.Asterisk
	Year      field.Int32
	Usuario   field.Int32
	IDCat     field.Int32
	Categoria field.String
	Total     field.Float64

	fieldMap map[string]field.Expr
}

func (t totalPerCategoryIncome) Table(newTableName string) *totalPerCategoryIncome {
	t.totalPerCategoryIncomeDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t totalPerCategoryIncome) As(alias string) *totalPerCategoryIncome {
	t.totalPerCategoryIncomeDo.DO = *(t.totalPerCategoryIncomeDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *totalPerCategoryIncome) updateTableName(table string) *totalPerCategoryIncome {
	t.ALL = field.NewAsterisk(table)
	t.Year = field.NewInt32(table, "Year")
	t.Usuario = field.NewInt32(table, "Usuario")
	t.IDCat = field.NewInt32(table, "idCat")
	t.Categoria = field.NewString(table, "Categoria")
	t.Total = field.NewFloat64(table, "Total")

	t.fillFieldMap()

	return t
}

func (t *totalPerCategoryIncome) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *totalPerCategoryIncome) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["Year"] = t.Year
	t.fieldMap["Usuario"] = t.Usuario
	t.fieldMap["idCat"] = t.IDCat
	t.fieldMap["Categoria"] = t.Categoria
	t.fieldMap["Total"] = t.Total
}

func (t totalPerCategoryIncome) clone(db *gorm.DB) totalPerCategoryIncome {
	t.totalPerCategoryIncomeDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t totalPerCategoryIncome) replaceDB(db *gorm.DB) totalPerCategoryIncome {
	t.totalPerCategoryIncomeDo.ReplaceDB(db)
	return t
}

type totalPerCategoryIncomeDo struct{ gen.DO }

func (t totalPerCategoryIncomeDo) Debug() *totalPerCategoryIncomeDo {
	return t.withDO(t.DO.Debug())
}

func (t totalPerCategoryIncomeDo) WithContext(ctx context.Context) *totalPerCategoryIncomeDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t totalPerCategoryIncomeDo) ReadDB() *totalPerCategoryIncomeDo {
	return t.Clauses(dbresolver.Read)
}

func (t totalPerCategoryIncomeDo) WriteDB() *totalPerCategoryIncomeDo {
	return t.Clauses(dbresolver.Write)
}

func (t totalPerCategoryIncomeDo) Session(config *gorm.Session) *totalPerCategoryIncomeDo {
	return t.withDO(t.DO.Session(config))
}

func (t totalPerCategoryIncomeDo) Clauses(conds ...clause.Expression) *totalPerCategoryIncomeDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t totalPerCategoryIncomeDo) Returning(value interface{}, columns ...string) *totalPerCategoryIncomeDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t totalPerCategoryIncomeDo) Not(conds ...gen.Condition) *totalPerCategoryIncomeDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t totalPerCategoryIncomeDo) Or(conds ...gen.Condition) *totalPerCategoryIncomeDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t totalPerCategoryIncomeDo) Select(conds ...field.Expr) *totalPerCategoryIncomeDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t totalPerCategoryIncomeDo) Where(conds ...gen.Condition) *totalPerCategoryIncomeDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t totalPerCategoryIncomeDo) Order(conds ...field.Expr) *totalPerCategoryIncomeDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t totalPerCategoryIncomeDo) Distinct(cols ...field.Expr) *totalPerCategoryIncomeDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t totalPerCategoryIncomeDo) Omit(cols ...field.Expr) *totalPerCategoryIncomeDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t totalPerCategoryIncomeDo) Join(table schema.Tabler, on ...field.Expr) *totalPerCategoryIncomeDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t totalPerCategoryIncomeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *totalPerCategoryIncomeDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t totalPerCategoryIncomeDo) RightJoin(table schema.Tabler, on ...field.Expr) *totalPerCategoryIncomeDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t totalPerCategoryIncomeDo) Group(cols ...field.Expr) *totalPerCategoryIncomeDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t totalPerCategoryIncomeDo) Having(conds ...gen.Condition) *totalPerCategoryIncomeDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t totalPerCategoryIncomeDo) Limit(limit int) *totalPerCategoryIncomeDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t totalPerCategoryIncomeDo) Offset(offset int) *totalPerCategoryIncomeDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t totalPerCategoryIncomeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *totalPerCategoryIncomeDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t totalPerCategoryIncomeDo) Unscoped() *totalPerCategoryIncomeDo {
	return t.withDO(t.DO.Unscoped())
}

func (t totalPerCategoryIncomeDo) Create(values ...*model.TotalPerCategoryIncome) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t totalPerCategoryIncomeDo) CreateInBatches(values []*model.TotalPerCategoryIncome, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t totalPerCategoryIncomeDo) Save(values ...*model.TotalPerCategoryIncome) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t totalPerCategoryIncomeDo) First() (*model.TotalPerCategoryIncome, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TotalPerCategoryIncome), nil
	}
}

func (t totalPerCategoryIncomeDo) Take() (*model.TotalPerCategoryIncome, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TotalPerCategoryIncome), nil
	}
}

func (t totalPerCategoryIncomeDo) Last() (*model.TotalPerCategoryIncome, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TotalPerCategoryIncome), nil
	}
}

func (t totalPerCategoryIncomeDo) Find() ([]*model.TotalPerCategoryIncome, error) {
	result, err := t.DO.Find()
	return result.([]*model.TotalPerCategoryIncome), err
}

func (t totalPerCategoryIncomeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TotalPerCategoryIncome, err error) {
	buf := make([]*model.TotalPerCategoryIncome, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t totalPerCategoryIncomeDo) FindInBatches(result *[]*model.TotalPerCategoryIncome, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t totalPerCategoryIncomeDo) Attrs(attrs ...field.AssignExpr) *totalPerCategoryIncomeDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t totalPerCategoryIncomeDo) Assign(attrs ...field.AssignExpr) *totalPerCategoryIncomeDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t totalPerCategoryIncomeDo) Joins(fields ...field.RelationField) *totalPerCategoryIncomeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t totalPerCategoryIncomeDo) Preload(fields ...field.RelationField) *totalPerCategoryIncomeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t totalPerCategoryIncomeDo) FirstOrInit() (*model.TotalPerCategoryIncome, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TotalPerCategoryIncome), nil
	}
}

func (t totalPerCategoryIncomeDo) FirstOrCreate() (*model.TotalPerCategoryIncome, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TotalPerCategoryIncome), nil
	}
}

func (t totalPerCategoryIncomeDo) FindByPage(offset int, limit int) (result []*model.TotalPerCategoryIncome, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t totalPerCategoryIncomeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t totalPerCategoryIncomeDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t totalPerCategoryIncomeDo) Delete(models ...*model.TotalPerCategoryIncome) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *totalPerCategoryIncomeDo) withDO(do gen.Dao) *totalPerCategoryIncomeDo {
	t.DO = *do.(*gen.DO)
	return t
}
