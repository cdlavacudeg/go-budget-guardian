// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/cdlavacudeg/go-budget-guardian/model"
)

func newLedgerTransfer(db *gorm.DB, opts ...gen.DOOption) ledgerTransfer {
	_ledgerTransfer := ledgerTransfer{}

	_ledgerTransfer.ledgerTransferDo.UseDB(db, opts...)
	_ledgerTransfer.ledgerTransferDo.UseModel(&model.LedgerTransfer{})

	tableName := _ledgerTransfer.ledgerTransferDo.TableName()
	_ledgerTransfer.ALL = field.NewAsterisk(tableName)
	_ledgerTransfer.IDTransfer = field.NewInt32(tableName, "id_transfer")
	_ledgerTransfer.IDAccountOut = field.NewInt32(tableName, "id_account_out")
	_ledgerTransfer.IDAccountIn = field.NewInt32(tableName, "id_account_in")
	_ledgerTransfer.Descripcion = field.NewString(tableName, "descripcion")
	_ledgerTransfer.Amount = field.NewFloat64(tableName, "amount")
	_ledgerTransfer.Date = field.NewTime(tableName, "date")

	_ledgerTransfer.fillFieldMap()

	return _ledgerTransfer
}

type ledgerTransfer struct {
	ledgerTransferDo

	ALL          field.Asterisk
	IDTransfer   field.Int32
	IDAccountOut field.Int32
	IDAccountIn  field.Int32
	Descripcion  field.String
	Amount       field.Float64
	Date         field.Time

	fieldMap map[string]field.Expr
}

func (l ledgerTransfer) Table(newTableName string) *ledgerTransfer {
	l.ledgerTransferDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l ledgerTransfer) As(alias string) *ledgerTransfer {
	l.ledgerTransferDo.DO = *(l.ledgerTransferDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *ledgerTransfer) updateTableName(table string) *ledgerTransfer {
	l.ALL = field.NewAsterisk(table)
	l.IDTransfer = field.NewInt32(table, "id_transfer")
	l.IDAccountOut = field.NewInt32(table, "id_account_out")
	l.IDAccountIn = field.NewInt32(table, "id_account_in")
	l.Descripcion = field.NewString(table, "descripcion")
	l.Amount = field.NewFloat64(table, "amount")
	l.Date = field.NewTime(table, "date")

	l.fillFieldMap()

	return l
}

func (l *ledgerTransfer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *ledgerTransfer) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 6)
	l.fieldMap["id_transfer"] = l.IDTransfer
	l.fieldMap["id_account_out"] = l.IDAccountOut
	l.fieldMap["id_account_in"] = l.IDAccountIn
	l.fieldMap["descripcion"] = l.Descripcion
	l.fieldMap["amount"] = l.Amount
	l.fieldMap["date"] = l.Date
}

func (l ledgerTransfer) clone(db *gorm.DB) ledgerTransfer {
	l.ledgerTransferDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l ledgerTransfer) replaceDB(db *gorm.DB) ledgerTransfer {
	l.ledgerTransferDo.ReplaceDB(db)
	return l
}

type ledgerTransferDo struct{ gen.DO }

func (l ledgerTransferDo) Debug() *ledgerTransferDo {
	return l.withDO(l.DO.Debug())
}

func (l ledgerTransferDo) WithContext(ctx context.Context) *ledgerTransferDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l ledgerTransferDo) ReadDB() *ledgerTransferDo {
	return l.Clauses(dbresolver.Read)
}

func (l ledgerTransferDo) WriteDB() *ledgerTransferDo {
	return l.Clauses(dbresolver.Write)
}

func (l ledgerTransferDo) Session(config *gorm.Session) *ledgerTransferDo {
	return l.withDO(l.DO.Session(config))
}

func (l ledgerTransferDo) Clauses(conds ...clause.Expression) *ledgerTransferDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l ledgerTransferDo) Returning(value interface{}, columns ...string) *ledgerTransferDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l ledgerTransferDo) Not(conds ...gen.Condition) *ledgerTransferDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l ledgerTransferDo) Or(conds ...gen.Condition) *ledgerTransferDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l ledgerTransferDo) Select(conds ...field.Expr) *ledgerTransferDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l ledgerTransferDo) Where(conds ...gen.Condition) *ledgerTransferDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l ledgerTransferDo) Order(conds ...field.Expr) *ledgerTransferDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l ledgerTransferDo) Distinct(cols ...field.Expr) *ledgerTransferDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l ledgerTransferDo) Omit(cols ...field.Expr) *ledgerTransferDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l ledgerTransferDo) Join(table schema.Tabler, on ...field.Expr) *ledgerTransferDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l ledgerTransferDo) LeftJoin(table schema.Tabler, on ...field.Expr) *ledgerTransferDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l ledgerTransferDo) RightJoin(table schema.Tabler, on ...field.Expr) *ledgerTransferDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l ledgerTransferDo) Group(cols ...field.Expr) *ledgerTransferDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l ledgerTransferDo) Having(conds ...gen.Condition) *ledgerTransferDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l ledgerTransferDo) Limit(limit int) *ledgerTransferDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l ledgerTransferDo) Offset(offset int) *ledgerTransferDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l ledgerTransferDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *ledgerTransferDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l ledgerTransferDo) Unscoped() *ledgerTransferDo {
	return l.withDO(l.DO.Unscoped())
}

func (l ledgerTransferDo) Create(values ...*model.LedgerTransfer) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l ledgerTransferDo) CreateInBatches(values []*model.LedgerTransfer, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l ledgerTransferDo) Save(values ...*model.LedgerTransfer) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l ledgerTransferDo) First() (*model.LedgerTransfer, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LedgerTransfer), nil
	}
}

func (l ledgerTransferDo) Take() (*model.LedgerTransfer, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LedgerTransfer), nil
	}
}

func (l ledgerTransferDo) Last() (*model.LedgerTransfer, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LedgerTransfer), nil
	}
}

func (l ledgerTransferDo) Find() ([]*model.LedgerTransfer, error) {
	result, err := l.DO.Find()
	return result.([]*model.LedgerTransfer), err
}

func (l ledgerTransferDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LedgerTransfer, err error) {
	buf := make([]*model.LedgerTransfer, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l ledgerTransferDo) FindInBatches(result *[]*model.LedgerTransfer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l ledgerTransferDo) Attrs(attrs ...field.AssignExpr) *ledgerTransferDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l ledgerTransferDo) Assign(attrs ...field.AssignExpr) *ledgerTransferDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l ledgerTransferDo) Joins(fields ...field.RelationField) *ledgerTransferDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l ledgerTransferDo) Preload(fields ...field.RelationField) *ledgerTransferDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l ledgerTransferDo) FirstOrInit() (*model.LedgerTransfer, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LedgerTransfer), nil
	}
}

func (l ledgerTransferDo) FirstOrCreate() (*model.LedgerTransfer, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LedgerTransfer), nil
	}
}

func (l ledgerTransferDo) FindByPage(offset int, limit int) (result []*model.LedgerTransfer, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l ledgerTransferDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l ledgerTransferDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l ledgerTransferDo) Delete(models ...*model.LedgerTransfer) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *ledgerTransferDo) withDO(do gen.Dao) *ledgerTransferDo {
	l.DO = *do.(*gen.DO)
	return l
}
