// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/cdlavacudeg/go-budget-guardian/model"
)

func newTotalPerMonthAccount(db *gorm.DB, opts ...gen.DOOption) totalPerMonthAccount {
	_totalPerMonthAccount := totalPerMonthAccount{}

	_totalPerMonthAccount.totalPerMonthAccountDo.UseDB(db, opts...)
	_totalPerMonthAccount.totalPerMonthAccountDo.UseModel(&model.TotalPerMonthAccount{})

	tableName := _totalPerMonthAccount.totalPerMonthAccountDo.TableName()
	_totalPerMonthAccount.ALL = field.NewAsterisk(tableName)
	_totalPerMonthAccount.Month = field.NewInt32(tableName, "Month")
	_totalPerMonthAccount.Year = field.NewInt32(tableName, "Year")
	_totalPerMonthAccount.Account = field.NewString(tableName, "account")
	_totalPerMonthAccount.Usuario = field.NewInt32(tableName, "usuario")
	_totalPerMonthAccount.TotalIncome = field.NewFloat64(tableName, "Total income")
	_totalPerMonthAccount.TotalExpense = field.NewFloat64(tableName, "Total expense")
	_totalPerMonthAccount.TotalSaving = field.NewFloat64(tableName, "Total saving")
	_totalPerMonthAccount.Total = field.NewFloat64(tableName, "Total")

	_totalPerMonthAccount.fillFieldMap()

	return _totalPerMonthAccount
}

type totalPerMonthAccount struct {
	totalPerMonthAccountDo

	ALL          field.Asterisk
	Month        field.Int32
	Year         field.Int32
	Account      field.String
	Usuario      field.Int32
	TotalIncome  field.Float64
	TotalExpense field.Float64
	TotalSaving  field.Float64
	Total        field.Float64

	fieldMap map[string]field.Expr
}

func (t totalPerMonthAccount) Table(newTableName string) *totalPerMonthAccount {
	t.totalPerMonthAccountDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t totalPerMonthAccount) As(alias string) *totalPerMonthAccount {
	t.totalPerMonthAccountDo.DO = *(t.totalPerMonthAccountDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *totalPerMonthAccount) updateTableName(table string) *totalPerMonthAccount {
	t.ALL = field.NewAsterisk(table)
	t.Month = field.NewInt32(table, "Month")
	t.Year = field.NewInt32(table, "Year")
	t.Account = field.NewString(table, "account")
	t.Usuario = field.NewInt32(table, "usuario")
	t.TotalIncome = field.NewFloat64(table, "Total income")
	t.TotalExpense = field.NewFloat64(table, "Total expense")
	t.TotalSaving = field.NewFloat64(table, "Total saving")
	t.Total = field.NewFloat64(table, "Total")

	t.fillFieldMap()

	return t
}

func (t *totalPerMonthAccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *totalPerMonthAccount) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["Month"] = t.Month
	t.fieldMap["Year"] = t.Year
	t.fieldMap["account"] = t.Account
	t.fieldMap["usuario"] = t.Usuario
	t.fieldMap["Total income"] = t.TotalIncome
	t.fieldMap["Total expense"] = t.TotalExpense
	t.fieldMap["Total saving"] = t.TotalSaving
	t.fieldMap["Total"] = t.Total
}

func (t totalPerMonthAccount) clone(db *gorm.DB) totalPerMonthAccount {
	t.totalPerMonthAccountDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t totalPerMonthAccount) replaceDB(db *gorm.DB) totalPerMonthAccount {
	t.totalPerMonthAccountDo.ReplaceDB(db)
	return t
}

type totalPerMonthAccountDo struct{ gen.DO }

func (t totalPerMonthAccountDo) Debug() *totalPerMonthAccountDo {
	return t.withDO(t.DO.Debug())
}

func (t totalPerMonthAccountDo) WithContext(ctx context.Context) *totalPerMonthAccountDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t totalPerMonthAccountDo) ReadDB() *totalPerMonthAccountDo {
	return t.Clauses(dbresolver.Read)
}

func (t totalPerMonthAccountDo) WriteDB() *totalPerMonthAccountDo {
	return t.Clauses(dbresolver.Write)
}

func (t totalPerMonthAccountDo) Session(config *gorm.Session) *totalPerMonthAccountDo {
	return t.withDO(t.DO.Session(config))
}

func (t totalPerMonthAccountDo) Clauses(conds ...clause.Expression) *totalPerMonthAccountDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t totalPerMonthAccountDo) Returning(value interface{}, columns ...string) *totalPerMonthAccountDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t totalPerMonthAccountDo) Not(conds ...gen.Condition) *totalPerMonthAccountDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t totalPerMonthAccountDo) Or(conds ...gen.Condition) *totalPerMonthAccountDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t totalPerMonthAccountDo) Select(conds ...field.Expr) *totalPerMonthAccountDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t totalPerMonthAccountDo) Where(conds ...gen.Condition) *totalPerMonthAccountDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t totalPerMonthAccountDo) Order(conds ...field.Expr) *totalPerMonthAccountDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t totalPerMonthAccountDo) Distinct(cols ...field.Expr) *totalPerMonthAccountDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t totalPerMonthAccountDo) Omit(cols ...field.Expr) *totalPerMonthAccountDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t totalPerMonthAccountDo) Join(table schema.Tabler, on ...field.Expr) *totalPerMonthAccountDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t totalPerMonthAccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) *totalPerMonthAccountDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t totalPerMonthAccountDo) RightJoin(table schema.Tabler, on ...field.Expr) *totalPerMonthAccountDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t totalPerMonthAccountDo) Group(cols ...field.Expr) *totalPerMonthAccountDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t totalPerMonthAccountDo) Having(conds ...gen.Condition) *totalPerMonthAccountDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t totalPerMonthAccountDo) Limit(limit int) *totalPerMonthAccountDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t totalPerMonthAccountDo) Offset(offset int) *totalPerMonthAccountDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t totalPerMonthAccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *totalPerMonthAccountDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t totalPerMonthAccountDo) Unscoped() *totalPerMonthAccountDo {
	return t.withDO(t.DO.Unscoped())
}

func (t totalPerMonthAccountDo) Create(values ...*model.TotalPerMonthAccount) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t totalPerMonthAccountDo) CreateInBatches(values []*model.TotalPerMonthAccount, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t totalPerMonthAccountDo) Save(values ...*model.TotalPerMonthAccount) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t totalPerMonthAccountDo) First() (*model.TotalPerMonthAccount, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TotalPerMonthAccount), nil
	}
}

func (t totalPerMonthAccountDo) Take() (*model.TotalPerMonthAccount, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TotalPerMonthAccount), nil
	}
}

func (t totalPerMonthAccountDo) Last() (*model.TotalPerMonthAccount, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TotalPerMonthAccount), nil
	}
}

func (t totalPerMonthAccountDo) Find() ([]*model.TotalPerMonthAccount, error) {
	result, err := t.DO.Find()
	return result.([]*model.TotalPerMonthAccount), err
}

func (t totalPerMonthAccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TotalPerMonthAccount, err error) {
	buf := make([]*model.TotalPerMonthAccount, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t totalPerMonthAccountDo) FindInBatches(result *[]*model.TotalPerMonthAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t totalPerMonthAccountDo) Attrs(attrs ...field.AssignExpr) *totalPerMonthAccountDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t totalPerMonthAccountDo) Assign(attrs ...field.AssignExpr) *totalPerMonthAccountDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t totalPerMonthAccountDo) Joins(fields ...field.RelationField) *totalPerMonthAccountDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t totalPerMonthAccountDo) Preload(fields ...field.RelationField) *totalPerMonthAccountDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t totalPerMonthAccountDo) FirstOrInit() (*model.TotalPerMonthAccount, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TotalPerMonthAccount), nil
	}
}

func (t totalPerMonthAccountDo) FirstOrCreate() (*model.TotalPerMonthAccount, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TotalPerMonthAccount), nil
	}
}

func (t totalPerMonthAccountDo) FindByPage(offset int, limit int) (result []*model.TotalPerMonthAccount, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t totalPerMonthAccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t totalPerMonthAccountDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t totalPerMonthAccountDo) Delete(models ...*model.TotalPerMonthAccount) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *totalPerMonthAccountDo) withDO(do gen.Dao) *totalPerMonthAccountDo {
	t.DO = *do.(*gen.DO)
	return t
}
