// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/cdlavacudeg/go-budget-guardian/model"
)

func newTotalInAccount(db *gorm.DB, opts ...gen.DOOption) totalInAccount {
	_totalInAccount := totalInAccount{}

	_totalInAccount.totalInAccountDo.UseDB(db, opts...)
	_totalInAccount.totalInAccountDo.UseModel(&model.TotalInAccount{})

	tableName := _totalInAccount.totalInAccountDo.TableName()
	_totalInAccount.ALL = field.NewAsterisk(tableName)
	_totalInAccount.Account = field.NewString(tableName, "account")
	_totalInAccount.Usuario = field.NewInt32(tableName, "usuario")
	_totalInAccount.TotalIncome = field.NewFloat64(tableName, "Total income")
	_totalInAccount.TotalExpense = field.NewFloat64(tableName, "Total expense")
	_totalInAccount.TotalSaving = field.NewFloat64(tableName, "Total Saving")
	_totalInAccount.Total = field.NewFloat64(tableName, "Total")

	_totalInAccount.fillFieldMap()

	return _totalInAccount
}

type totalInAccount struct {
	totalInAccountDo

	ALL          field.Asterisk
	Account      field.String
	Usuario      field.Int32
	TotalIncome  field.Float64
	TotalExpense field.Float64
	TotalSaving  field.Float64
	Total        field.Float64

	fieldMap map[string]field.Expr
}

func (t totalInAccount) Table(newTableName string) *totalInAccount {
	t.totalInAccountDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t totalInAccount) As(alias string) *totalInAccount {
	t.totalInAccountDo.DO = *(t.totalInAccountDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *totalInAccount) updateTableName(table string) *totalInAccount {
	t.ALL = field.NewAsterisk(table)
	t.Account = field.NewString(table, "account")
	t.Usuario = field.NewInt32(table, "usuario")
	t.TotalIncome = field.NewFloat64(table, "Total income")
	t.TotalExpense = field.NewFloat64(table, "Total expense")
	t.TotalSaving = field.NewFloat64(table, "Total Saving")
	t.Total = field.NewFloat64(table, "Total")

	t.fillFieldMap()

	return t
}

func (t *totalInAccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *totalInAccount) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["account"] = t.Account
	t.fieldMap["usuario"] = t.Usuario
	t.fieldMap["Total income"] = t.TotalIncome
	t.fieldMap["Total expense"] = t.TotalExpense
	t.fieldMap["Total Saving"] = t.TotalSaving
	t.fieldMap["Total"] = t.Total
}

func (t totalInAccount) clone(db *gorm.DB) totalInAccount {
	t.totalInAccountDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t totalInAccount) replaceDB(db *gorm.DB) totalInAccount {
	t.totalInAccountDo.ReplaceDB(db)
	return t
}

type totalInAccountDo struct{ gen.DO }

func (t totalInAccountDo) Debug() *totalInAccountDo {
	return t.withDO(t.DO.Debug())
}

func (t totalInAccountDo) WithContext(ctx context.Context) *totalInAccountDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t totalInAccountDo) ReadDB() *totalInAccountDo {
	return t.Clauses(dbresolver.Read)
}

func (t totalInAccountDo) WriteDB() *totalInAccountDo {
	return t.Clauses(dbresolver.Write)
}

func (t totalInAccountDo) Session(config *gorm.Session) *totalInAccountDo {
	return t.withDO(t.DO.Session(config))
}

func (t totalInAccountDo) Clauses(conds ...clause.Expression) *totalInAccountDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t totalInAccountDo) Returning(value interface{}, columns ...string) *totalInAccountDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t totalInAccountDo) Not(conds ...gen.Condition) *totalInAccountDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t totalInAccountDo) Or(conds ...gen.Condition) *totalInAccountDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t totalInAccountDo) Select(conds ...field.Expr) *totalInAccountDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t totalInAccountDo) Where(conds ...gen.Condition) *totalInAccountDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t totalInAccountDo) Order(conds ...field.Expr) *totalInAccountDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t totalInAccountDo) Distinct(cols ...field.Expr) *totalInAccountDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t totalInAccountDo) Omit(cols ...field.Expr) *totalInAccountDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t totalInAccountDo) Join(table schema.Tabler, on ...field.Expr) *totalInAccountDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t totalInAccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) *totalInAccountDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t totalInAccountDo) RightJoin(table schema.Tabler, on ...field.Expr) *totalInAccountDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t totalInAccountDo) Group(cols ...field.Expr) *totalInAccountDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t totalInAccountDo) Having(conds ...gen.Condition) *totalInAccountDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t totalInAccountDo) Limit(limit int) *totalInAccountDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t totalInAccountDo) Offset(offset int) *totalInAccountDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t totalInAccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *totalInAccountDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t totalInAccountDo) Unscoped() *totalInAccountDo {
	return t.withDO(t.DO.Unscoped())
}

func (t totalInAccountDo) Create(values ...*model.TotalInAccount) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t totalInAccountDo) CreateInBatches(values []*model.TotalInAccount, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t totalInAccountDo) Save(values ...*model.TotalInAccount) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t totalInAccountDo) First() (*model.TotalInAccount, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TotalInAccount), nil
	}
}

func (t totalInAccountDo) Take() (*model.TotalInAccount, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TotalInAccount), nil
	}
}

func (t totalInAccountDo) Last() (*model.TotalInAccount, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TotalInAccount), nil
	}
}

func (t totalInAccountDo) Find() ([]*model.TotalInAccount, error) {
	result, err := t.DO.Find()
	return result.([]*model.TotalInAccount), err
}

func (t totalInAccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TotalInAccount, err error) {
	buf := make([]*model.TotalInAccount, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t totalInAccountDo) FindInBatches(result *[]*model.TotalInAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t totalInAccountDo) Attrs(attrs ...field.AssignExpr) *totalInAccountDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t totalInAccountDo) Assign(attrs ...field.AssignExpr) *totalInAccountDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t totalInAccountDo) Joins(fields ...field.RelationField) *totalInAccountDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t totalInAccountDo) Preload(fields ...field.RelationField) *totalInAccountDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t totalInAccountDo) FirstOrInit() (*model.TotalInAccount, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TotalInAccount), nil
	}
}

func (t totalInAccountDo) FirstOrCreate() (*model.TotalInAccount, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TotalInAccount), nil
	}
}

func (t totalInAccountDo) FindByPage(offset int, limit int) (result []*model.TotalInAccount, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t totalInAccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t totalInAccountDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t totalInAccountDo) Delete(models ...*model.TotalInAccount) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *totalInAccountDo) withDO(do gen.Dao) *totalInAccountDo {
	t.DO = *do.(*gen.DO)
	return t
}
