// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/cdlavacudeg/go-budget-guardian/model"
)

func newLedgerExpense(db *gorm.DB, opts ...gen.DOOption) ledgerExpense {
	_ledgerExpense := ledgerExpense{}

	_ledgerExpense.ledgerExpenseDo.UseDB(db, opts...)
	_ledgerExpense.ledgerExpenseDo.UseModel(&model.LedgerExpense{})

	tableName := _ledgerExpense.ledgerExpenseDo.TableName()
	_ledgerExpense.ALL = field.NewAsterisk(tableName)
	_ledgerExpense.IDExpense = field.NewInt32(tableName, "id_expense")
	_ledgerExpense.AccountID = field.NewInt32(tableName, "account_id")
	_ledgerExpense.GroupID = field.NewInt32(tableName, "group_id")
	_ledgerExpense.ExpenseCategoryID = field.NewInt32(tableName, "expense_category_id")
	_ledgerExpense.Description = field.NewString(tableName, "description")
	_ledgerExpense.Amount = field.NewFloat64(tableName, "amount")
	_ledgerExpense.Date = field.NewTime(tableName, "date")

	_ledgerExpense.fillFieldMap()

	return _ledgerExpense
}

type ledgerExpense struct {
	ledgerExpenseDo

	ALL               field.Asterisk
	IDExpense         field.Int32
	AccountID         field.Int32
	GroupID           field.Int32
	ExpenseCategoryID field.Int32
	Description       field.String
	Amount            field.Float64
	Date              field.Time

	fieldMap map[string]field.Expr
}

func (l ledgerExpense) Table(newTableName string) *ledgerExpense {
	l.ledgerExpenseDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l ledgerExpense) As(alias string) *ledgerExpense {
	l.ledgerExpenseDo.DO = *(l.ledgerExpenseDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *ledgerExpense) updateTableName(table string) *ledgerExpense {
	l.ALL = field.NewAsterisk(table)
	l.IDExpense = field.NewInt32(table, "id_expense")
	l.AccountID = field.NewInt32(table, "account_id")
	l.GroupID = field.NewInt32(table, "group_id")
	l.ExpenseCategoryID = field.NewInt32(table, "expense_category_id")
	l.Description = field.NewString(table, "description")
	l.Amount = field.NewFloat64(table, "amount")
	l.Date = field.NewTime(table, "date")

	l.fillFieldMap()

	return l
}

func (l *ledgerExpense) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *ledgerExpense) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 7)
	l.fieldMap["id_expense"] = l.IDExpense
	l.fieldMap["account_id"] = l.AccountID
	l.fieldMap["group_id"] = l.GroupID
	l.fieldMap["expense_category_id"] = l.ExpenseCategoryID
	l.fieldMap["description"] = l.Description
	l.fieldMap["amount"] = l.Amount
	l.fieldMap["date"] = l.Date
}

func (l ledgerExpense) clone(db *gorm.DB) ledgerExpense {
	l.ledgerExpenseDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l ledgerExpense) replaceDB(db *gorm.DB) ledgerExpense {
	l.ledgerExpenseDo.ReplaceDB(db)
	return l
}

type ledgerExpenseDo struct{ gen.DO }

func (l ledgerExpenseDo) Debug() *ledgerExpenseDo {
	return l.withDO(l.DO.Debug())
}

func (l ledgerExpenseDo) WithContext(ctx context.Context) *ledgerExpenseDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l ledgerExpenseDo) ReadDB() *ledgerExpenseDo {
	return l.Clauses(dbresolver.Read)
}

func (l ledgerExpenseDo) WriteDB() *ledgerExpenseDo {
	return l.Clauses(dbresolver.Write)
}

func (l ledgerExpenseDo) Session(config *gorm.Session) *ledgerExpenseDo {
	return l.withDO(l.DO.Session(config))
}

func (l ledgerExpenseDo) Clauses(conds ...clause.Expression) *ledgerExpenseDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l ledgerExpenseDo) Returning(value interface{}, columns ...string) *ledgerExpenseDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l ledgerExpenseDo) Not(conds ...gen.Condition) *ledgerExpenseDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l ledgerExpenseDo) Or(conds ...gen.Condition) *ledgerExpenseDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l ledgerExpenseDo) Select(conds ...field.Expr) *ledgerExpenseDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l ledgerExpenseDo) Where(conds ...gen.Condition) *ledgerExpenseDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l ledgerExpenseDo) Order(conds ...field.Expr) *ledgerExpenseDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l ledgerExpenseDo) Distinct(cols ...field.Expr) *ledgerExpenseDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l ledgerExpenseDo) Omit(cols ...field.Expr) *ledgerExpenseDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l ledgerExpenseDo) Join(table schema.Tabler, on ...field.Expr) *ledgerExpenseDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l ledgerExpenseDo) LeftJoin(table schema.Tabler, on ...field.Expr) *ledgerExpenseDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l ledgerExpenseDo) RightJoin(table schema.Tabler, on ...field.Expr) *ledgerExpenseDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l ledgerExpenseDo) Group(cols ...field.Expr) *ledgerExpenseDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l ledgerExpenseDo) Having(conds ...gen.Condition) *ledgerExpenseDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l ledgerExpenseDo) Limit(limit int) *ledgerExpenseDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l ledgerExpenseDo) Offset(offset int) *ledgerExpenseDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l ledgerExpenseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *ledgerExpenseDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l ledgerExpenseDo) Unscoped() *ledgerExpenseDo {
	return l.withDO(l.DO.Unscoped())
}

func (l ledgerExpenseDo) Create(values ...*model.LedgerExpense) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l ledgerExpenseDo) CreateInBatches(values []*model.LedgerExpense, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l ledgerExpenseDo) Save(values ...*model.LedgerExpense) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l ledgerExpenseDo) First() (*model.LedgerExpense, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LedgerExpense), nil
	}
}

func (l ledgerExpenseDo) Take() (*model.LedgerExpense, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LedgerExpense), nil
	}
}

func (l ledgerExpenseDo) Last() (*model.LedgerExpense, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LedgerExpense), nil
	}
}

func (l ledgerExpenseDo) Find() ([]*model.LedgerExpense, error) {
	result, err := l.DO.Find()
	return result.([]*model.LedgerExpense), err
}

func (l ledgerExpenseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LedgerExpense, err error) {
	buf := make([]*model.LedgerExpense, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l ledgerExpenseDo) FindInBatches(result *[]*model.LedgerExpense, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l ledgerExpenseDo) Attrs(attrs ...field.AssignExpr) *ledgerExpenseDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l ledgerExpenseDo) Assign(attrs ...field.AssignExpr) *ledgerExpenseDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l ledgerExpenseDo) Joins(fields ...field.RelationField) *ledgerExpenseDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l ledgerExpenseDo) Preload(fields ...field.RelationField) *ledgerExpenseDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l ledgerExpenseDo) FirstOrInit() (*model.LedgerExpense, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LedgerExpense), nil
	}
}

func (l ledgerExpenseDo) FirstOrCreate() (*model.LedgerExpense, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LedgerExpense), nil
	}
}

func (l ledgerExpenseDo) FindByPage(offset int, limit int) (result []*model.LedgerExpense, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l ledgerExpenseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l ledgerExpenseDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l ledgerExpenseDo) Delete(models ...*model.LedgerExpense) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *ledgerExpenseDo) withDO(do gen.Dao) *ledgerExpenseDo {
	l.DO = *do.(*gen.DO)
	return l
}
